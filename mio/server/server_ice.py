# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.8
#
# <auto-generated>
#
# Generated from file `server.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module server
_M_server = Ice.openModule('server')
__name__ = 'server'

_M_server._t_serverInterface = IcePy.defineValue('::server::serverInterface', Ice.Value, -1, (), False, True, None, ())

if 'serverInterfacePrx' not in _M_server.__dict__:
    _M_server.serverInterfacePrx = Ice.createTempClass()
    class serverInterfacePrx(Ice.ObjectPrx):

        def updateDB(self, jsonDf, context=None):
            return _M_server.serverInterface._op_updateDB.invoke(self, ((jsonDf, ), context))

        def updateDBAsync(self, jsonDf, context=None):
            return _M_server.serverInterface._op_updateDB.invokeAsync(self, ((jsonDf, ), context))

        def begin_updateDB(self, jsonDf, _response=None, _ex=None, _sent=None, context=None):
            return _M_server.serverInterface._op_updateDB.begin(self, ((jsonDf, ), _response, _ex, _sent, context))

        def end_updateDB(self, _r):
            return _M_server.serverInterface._op_updateDB.end(self, _r)

        def returnDataframe(self, context=None):
            return _M_server.serverInterface._op_returnDataframe.invoke(self, ((), context))

        def returnDataframeAsync(self, context=None):
            return _M_server.serverInterface._op_returnDataframe.invokeAsync(self, ((), context))

        def begin_returnDataframe(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_server.serverInterface._op_returnDataframe.begin(self, ((), _response, _ex, _sent, context))

        def end_returnDataframe(self, _r):
            return _M_server.serverInterface._op_returnDataframe.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_server.serverInterfacePrx.ice_checkedCast(proxy, '::server::serverInterface', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_server.serverInterfacePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::server::serverInterface'
    _M_server._t_serverInterfacePrx = IcePy.defineProxy('::server::serverInterface', serverInterfacePrx)

    _M_server.serverInterfacePrx = serverInterfacePrx
    del serverInterfacePrx

    _M_server.serverInterface = Ice.createTempClass()
    class serverInterface(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::server::serverInterface')

        def ice_id(self, current=None):
            return '::server::serverInterface'

        @staticmethod
        def ice_staticId():
            return '::server::serverInterface'

        def updateDB(self, jsonDf, current=None):
            raise NotImplementedError("servant method 'updateDB' not implemented")

        def returnDataframe(self, current=None):
            raise NotImplementedError("servant method 'returnDataframe' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_server._t_serverInterfaceDisp)

        __repr__ = __str__

    _M_server._t_serverInterfaceDisp = IcePy.defineClass('::server::serverInterface', serverInterface, (), None, ())
    serverInterface._ice_type = _M_server._t_serverInterfaceDisp

    serverInterface._op_updateDB = IcePy.Operation('updateDB', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    serverInterface._op_returnDataframe = IcePy.Operation('returnDataframe', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_server.serverInterface = serverInterface
    del serverInterface

# End of module server
